generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                      String     @db.VarChar(100)
  email                     String     @db.VarChar(255) @unique
  password                  String     @db.VarChar(255)
  profilePhoto              String?    @db.VarChar(255)
  profilePhotoPublicId      String?    @db.VarChar(255)
  bio                       String?    @db.VarChar(255)
  resetToken                String?    @db.VarChar(255)
  resetTokenExpiry          DateTime?
  posts                     Post[]
  comments                  Comment[]
  likes                     Like[]
  createdAt                 DateTime   @default(now()) @db.Timestamp(6)
  updatedAt                 DateTime   @updatedAt
}

model RevokedToken {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token             String     @unique
  expiresAt         DateTime
  createdAt         DateTime   @default(now()) @db.Timestamp(6)
  updatedAt         DateTime   @updatedAt
}

model Post {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content           String     @db.VarChar(2000)
  author            User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId          String     @db.Uuid
  comments          Comment[]
  likes             Like[]
  createdAt         DateTime   @default(now()) @db.Timestamp(6)
  updatedAt         DateTime   @updatedAt
}

model Comment {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content           String     @db.VarChar(1500)
  post              Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId            String     @db.Uuid
  author            User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId          String     @db.Uuid
  likes             Like[]
  createdAt         DateTime   @default(now()) @db.Timestamp(6)
  updatedAt         DateTime   @updatedAt
}

model Like {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String     @db.Uuid
  post              Post?      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId            String?    @db.Uuid
  comment           Comment?   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId         String?    @db.Uuid
  createdAt         DateTime   @default(now()) @db.Timestamp(6)
  updatedAt         DateTime   @updatedAt
}
